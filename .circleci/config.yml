# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: circle-ci-dotnet-hello
    docker:
      - image: circleci/buildpack-deps:stretch

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  dotnet-build:  
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      # - image: microsoft/dotnet:latest
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      # Checkout the code as the first step.
      - checkout        
      - run:
          # Update this line with the directory that contains your tests project file
          working_directory: ~/project/ # ~/project/App.Tests
          name: Run tests
          command: |
            dotnet build hello.sln
  build-image:
    executor: docker-publisher
    #docker:
    #  - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: docker build
          working_directory: ~/project/
          command: docker build -f hello/Dockerfile .        
  publish-dockerhub:  
    executor: docker-publisher
    steps:
      - setup_remote_docker
      - run:
          name: asdf
          working_directory: ~/project/
          command: echo "hello world"
  build-image-on-machine:  
    machine: true
    steps:
      - checkout
      - run:
          name: docker build
          working_directory: ~/project/
          command: docker build -f hello/Dockerfile .                      
  echo-vars:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      - checkout
      # Then simply use the dotnet container as you'd expect and run your tests
      - run:
          name: Show some of the CircleCI runtime env vars
          working_directory: ~/project/
          command: |-
            echo "DOCKERHUB_USERNAME: ${DOCKERHUB_USERNAME}"
            echo "TRIGGERER: ${CIRCLE_USERNAME}"
            echo "BUILD_NUMBER: ${CIRCLE_BUILD_NUM}"
            echo "BUILD_URL: ${CIRCLE_BUILD_URL}"
            echo "BRANCH: ${CIRCLE_BRANCH}"
            echo "RUNNING JOB: ${CIRCLE_JOB}"
            echo "JOB PARALLELISM: ${CIRCLE_NODE_TOTAL}"
            echo "CIRCLE_REPOSITORY_URL: ${CIRCLE_REPOSITORY_URL}"
            echo "TAG: ${TAG}"
            echo "CIRCLE_SHA1: ${CIRCLE_SHA1}"
      - run:
          name: list files
          working_directory: ~/project/
          command: |-
            ls
      - run:
          name: working dir
          working_directory: ~/project/
          command: |-
            echo $PWD                  

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample: 
    jobs:
      - echo-vars
      #- dotnet-build
      - build-image
      - publish-dockerhub:
          requires:
          - build-image
          filters:
            branches:
              only: main
